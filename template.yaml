AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  unofficial-office-hours-skill

  Sample SAM Template for unofficial-office-hours-skill

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:

  DataS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DataS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${DataS3Bucket}/*"
              - !Sub "arn:aws:s3:::${DataS3Bucket}"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  TranscribeStart:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: transcribe-start/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        -
          Statement:
            -
              Sid: TranscribeStart
              Effect: Allow
              Action:
                - 'transcribe:StartTranscriptionJob'
              Resource: '*'
            -
              Sid: S3Access
              Effect: Allow
              Action:
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'

      Architectures:
        - x86_64


  TranscribeStatus:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: transcribe-status/
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
        -
          Statement:
            -
              Sid: TranscribeStatus
              Effect: Allow
              Action:
                - 'transcribe:GetTranscriptionJob'
              Resource: '*'
      Architectures:
        - x86_64

  PipelineStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt PipelineStateMachineRole.Arn
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "TranscribeStart",
              "States": {
                "TranscribeStart": {
                  "Type": "Task",
                  "Resource": "${TranscribeStartArn}",
                  "Next": "TranscribeWait"
                },
                "TranscribeWait": {
                  "Type": "Wait",
                  "Seconds": 30,
                  "Next": "TranscribeStatus"
                },
                "TranscribeStatus": {
                  "Type": "Task",
                  "Resource": "${TranscribeStatusArn}",
                  "Next": "IsTranscribeFinished"
                },
                "IsTranscribeFinished": {
                  "Type": "Choice",
                  "Default": "TranscribeWait",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "StringEquals": "FAILED",
                      "Next": "TranscribeFailed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "COMPLETED",
                      "Next": "End"
                    }
                  ]
                },
                "End":{
                    "Type": "Pass",
                    "End": true
                },
                "TranscribeFailed": {
                  "Type": "Fail",
                  "Cause": "Transcription Failed.  Check CloudWatch logs for details.",
                  "Error": "ErrorA"
                }
              }
            }
          - {TranscribeStartArn: !GetAtt TranscribeStart.Arn, TranscribeStatusArn: !GetAtt TranscribeStatus.Arn}



  PipelineStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt TranscribeStart.Arn
                  - !GetAtt TranscribeStatus.Arn


##########
# TODO - determine if a custom vocab is necessary
# VocabularyCreate:
#   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
#   Properties:
#     CodeUri: vocabulary-create/
#     Handler: app.lambda_handler
#     Runtime: python3.9
#     Architectures:
#       - x86_64



# Outputs:
