AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  unofficial-office-hours-skill

  Sample SAM Template for unofficial-office-hours-skill


Parameters:
  TranscribeVocabTerms:
    Type: String
    Default: alexa,apl,lowe,blankenburg,alexa-presentation-language
  TranscribeVocabName:
    Type: String
    Default: UnofficialOfficeHoursVocab

Globals:
  Function:
    Timeout: 3

Resources:

  DataS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DataS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${DataS3Bucket}/*"
              - !Sub "arn:aws:s3:::${DataS3Bucket}"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  MediaConvertJobTemplate:
    Type: AWS::MediaConvert::JobTemplate
    Properties:
      AccelerationSettings:
        Mode: "DISABLED"
      StatusUpdateInterval: 'SECONDS_60'
      Priority: 0
      SettingsJson:
        TimecodeConfig:
          Source: 'ZEROBASED'
        OutputGroups:
          -
            CustomName: Group
            Name: 'File Group'
            Outputs:
              -
                ContainerSettings:
                  Container: 'MP4'
                VideoDescription:
                  CodecSettings:
                    Codec: 'H_264'
                    H264Settings:
                      MaxBitrate: 5000000
                      RateControlMode: 'QVBR'
                      SceneChangeDetect: 'TRANSITION_DETECTION'
                AudioDescriptions:
                  -
                    AudioSourceName: "Audio Selector 1"
                    CodecSettings:
                      Codec: 'AAC'
                      AacSettings:
                        Bitrate: 96000
                        CodingMode: "CODING_MODE_2_0"
                        SampleRate: 48000
            OutputGroupSettings:
              Type: "FILE_GROUP_SETTINGS"
              FileGroupSettings:
                Destination: !Sub "s3://{DataS3Bucket}/processed/"
        Inputs:
          -
            AudioSelectors:
              "Audio Selector 1":
                Tracks:
                  -
                    1
                DefaultSelection: "DEFAULT"
                SelectorType: TRACK
            TimecodeSource: 'ZEROBASED'






  ###### LAMBDA DEFINITIONS

  YouTubeConversionStart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: mediaconvert-start/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
          BUCKET_NAME: !Ref DataS3Bucket
          MEDIACONVERT_ROLE: !GetAtt MediaConvertJobRole.Arn
          MEDIACONVERT_TEMP_NAME: !GetAtt MediaConvertJobTemplate.Name
      Policies:
        -
          Statement:
            -
              Sid: MediaConvertStart
              Effect: Allow
              Action:
                - "mediaconvert:GetJobTemplate"
                - "mediaconvert:CreateJob"
                - "mediaconvert:ListJobTemplates"
                - "mediaconvert:DescribeEndpoints"
              Resource:
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:presets/*"
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:queues/*"
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:jobTemplates*"
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:endpoints*"
            -
              Sid: S3Access
              Effect: Allow
              Action:
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'
            -
              Sid: MediaConvertPass
              Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource: !GetAtt MediaConvertJobRole.Arn

  YouTubeConversionStatus:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: mediaconvert-status/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
      Policies:
        -
          Statement:
            -
              Sid: MediaConvertStart
              Effect: Allow
              Action:
                - "mediaconvert:GetJob"
                - "mediaconvert:DescribeEndpoints"
              Resource:
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:jobs/*"
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:endpoints*"


  TranscribeStart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: transcribe-start/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
          TRANSCRIBE_VOCAB_NAME: !Ref TranscribeVocabName
          BUCKET_NAME: !Ref DataS3Bucket
      Policies:
        -
          Statement:
            -
              Sid: TranscribeStart
              Effect: Allow
              Action:
                - 'transcribe:StartTranscriptionJob'
              Resource: '*'
            -
              Sid: S3Access
              Effect: Allow
              Action:
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'

      Architectures:
        - x86_64


  TranscribeStatus:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: transcribe-status/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Policies:
        -
          Statement:
            -
              Sid: TranscribeStatus
              Effect: Allow
              Action:
                - 'transcribe:GetTranscriptionJob'
              Resource: '*'
      Architectures:
        - x86_64


  ComprehendParagraph:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: comprehend-paragraph/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 150
      Environment:
        Variables:
          LOG_LEVEL: INFO
          BUCKET_NAME: !Ref DataS3Bucket
      Policies:
        -
          Statement:
            -
              Sid: ComprehendCall
              Effect: Allow
              Action:
                - 'comprehend:DetectEntities'
                - 'comprehend:DetectKeyPhrases'
                - 'comprehend:BatchDetectEntities'
              Resource: '*'
            -
              Effect: Allow
              Action:   # TODO - figure out exactly what is needed
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'
      Architectures:
        - x86_64

  ComprehendFullText:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: comprehend-fulltext/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 150
      Environment:
        Variables:
          LOG_LEVEL: INFO
          BUCKET_NAME: !Ref DataS3Bucket
      Policies:
        -
          Statement:
            -
              Sid: ComprehendCall
              Effect: Allow
              Action:
                - 'comprehend:DetectEntities'
                - 'comprehend:DetectKeyPhrases'
                - 'comprehend:BatchDetectEntities'
              Resource: '*'
            -
              Effect: Allow
              Action:   # TODO - figure out exactly what is needed
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'
      Architectures:
        - x86_64

  PipelineStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt PipelineStateMachineRole.Arn
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "YouTubeConvertStart",
              "States": {
                "YouTubeConvertStart": {
                  "Type": "Task",
                  "Resource": "${YouTubeConversionStartArn}",
                  "Next": "YouTubeConvertWait"
                },
                "YouTubeConvertWait": {
                  "Type": "Wait",
                  "Seconds": 30,
                  "Next": "YouTubeConvertStatus"
                },
                "YouTubeConvertStatus": {
                  "Type": "Task",
                  "Resource": "${YouTubeConversionStatusArn}",
                  "Next": "IsYouTubeConvertFinished"
                },
                "IsYouTubeConvertFinished": {
                  "Type": "Choice",
                  "Default": "YouTubeConvertWait",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "StringEquals": "ERROR",
                      "Next": "YouTubeConvertFailed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "CANCELED",
                      "Next": "YouTubeConvertFailed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "COMPLETE",
                      "Next": "TranscribeStart"
                    }
                  ]
                },
                "YouTubeConvertFailed": {
                  "Type": "Fail",
                  "Cause": "MediaConvert Failed.  Check CloudWatch logs for details.",
                  "Error": "ErrorA"
                },
                "TranscribeStart": {
                  "Type": "Task",
                  "Resource": "${TranscribeStartArn}",
                  "Next": "TranscribeWait"
                },
                "TranscribeWait": {
                  "Type": "Wait",
                  "Seconds": 30,
                  "Next": "TranscribeStatus"
                },
                "TranscribeStatus": {
                  "Type": "Task",
                  "Resource": "${TranscribeStatusArn}",
                  "Next": "IsTranscribeFinished"
                },
                "IsTranscribeFinished": {
                  "Type": "Choice",
                  "Default": "TranscribeWait",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "StringEquals": "FAILED",
                      "Next": "TranscribeFailed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "COMPLETED",
                      "Next": "ComprehendParallel"
                    }
                  ]
                },
                "ComprehendParallel": {
                  "Type": "Parallel",
                  "Next": "End",
                  "Branches": [
                    {
                      "StartAt": "ComprehendParagraph",
                      "States": {
                          "ComprehendParagraph": {
                            "Type": "Task",
                            "Resource": "${ComprehendParagraphArn}",
                            "End": true
                          }
                      }
                    },
                    {
                      "StartAt": "ComprehendFullText",
                      "States": {
                          "ComprehendFullText": {
                            "Type": "Task",
                            "Resource": "${ComprehendFullTextArn}",
                            "End": true
                          }
                      }
                    }
                  ]
                },
                "End":{
                    "Type": "Pass",
                    "End": true
                },
                "TranscribeFailed": {
                  "Type": "Fail",
                  "Cause": "Transcription Failed.  Check CloudWatch logs for details.",
                  "Error": "ErrorA"
                }
              }
            }
          - {YouTubeConversionStartArn: !GetAtt YouTubeConversionStart.Arn, YouTubeConversionStatusArn: !GetAtt YouTubeConversionStatus.Arn, TranscribeStartArn: !GetAtt TranscribeStart.Arn, TranscribeStatusArn: !GetAtt TranscribeStatus.Arn, ComprehendParagraphArn: !GetAtt ComprehendParagraph.Arn, ComprehendFullTextArn: !GetAtt ComprehendFullText.Arn}


#### IAM ROLES


  MediaConvertJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "mediaconvert.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"

  PipelineStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt YouTubeConversionStart.Arn
                  - !GetAtt YouTubeConversionStatus.Arn
                  - !GetAtt TranscribeStart.Arn
                  - !GetAtt TranscribeStatus.Arn
                  - !GetAtt ComprehendParagraph.Arn
                  - !GetAtt ComprehendFullText.Arn


### Resources that run once

  CreateVocab:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt TranscribeVocabCreate.Arn
      CustomResourceAction: CreateVocab

  TranscribeVocabCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: transcribe-vocab/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
          TRANSCRIBE_VOCAB_NAME: !Ref TranscribeVocabName
          TRANSCRIBE_VOCAB_TERMS: !Ref TranscribeVocabTerms
      Policies:
        -
          Statement:
            -
              Sid: TranscribeVocab
              Effect: Allow
              Action:
                - 'transcribe:CreateVocabulary'
                - 'transcribe:DeleteVocabulary'
              Resource: '*'
      Architectures:
        - x86_64



# Outputs:
