AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  unofficial-office-hours-skill

  Sample SAM Template for unofficial-office-hours-skill

Parameters:
  TranscribeVocabTerms:
    Type: String
    Default: alexa,apl,lowe,blankenburg,alexa-presentation-language
  TranscribeVocabName:
    Type: String
    Default: UnofficialOfficeHoursVocab
  YouTubeChannelID:
    Type: String
    Default: UCbx0SPpWT6yB7_yY_ik7pmg
  OSDomainName:
    Type: String
    Default: officehours
  DashboardUser:
    Type: String
    Default: admin
    Description: The name of the user that is used to log into OpenSearch Dashboard.
  AlexaSkillID:
    Type: String
    Default: amzn1.ask.skill.cbd690c5-7370-48ec-afb4-fd941dba1212
    Description: The Alexa Skill ID generated from the Alexa Developer console

Globals:
  Function:
    Timeout: 3

Resources:

  ##### Alexa Skill Lambda
  AlexaSkillBackend:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/skill-backend/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Events:
        SkillEvent:
          Type: AlexaSkill
          Properties: 
            SkillId: !Ref AlexaSkillID
      Environment:
        Variables:
          LOG_LEVEL: INFO
          OS_DOMAIN: !GetAtt OpenSearchDomain.DomainEndpoint
          CDN_URL: !Sub https://${CDNDistribution.DomainName}/processed/
          TABLE_NAME: !Ref VideoMetadataTable
      Policies:
        -
          Statement:
            - 
              Effect: Allow
              Action:
                - 'es:ESHttpGet'
                - 'es:ESHttpPost'
                - 'es:ESHttpPut'
                - 'es:ESHttpHead'
              Resource:
                - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomain}/*'
                - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomain}'
            -
              Sid: DynamodbWrite
              Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${VideoMetadataTable}"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${VideoMetadataTable}/index/*"

  #### Other Resource


  DataS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DataS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${DataS3Bucket}/*"
              - !Sub "arn:aws:s3:::${DataS3Bucket}"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
          - Sid: AllowCloudFront
            Action: "s3:Get*"
            Effect: Allow
            Resource: 
              - !Sub "arn:aws:s3:::${DataS3Bucket}/processed/*"
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "pail.live OAI"

  CDNDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub "${DataS3Bucket}.s3.amazonaws.com"
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !Ref OriginAccessIdentity]]
        Enabled: 'true'
        Comment: This will be used to stream videos
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          DefaultTTL: 3600
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_200
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'

  VideoMetadataTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: "id"
        Type: String


  YouTubeCallbackAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod

########################################
# Cognito identity pool                #
########################################
  CognitoUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool

  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
      - ClientId: !Ref CognitoApplicationClient
        ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
        ServerSideTokenCheck: false

  CognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        unauthenticated: !GetAtt CognitoUnauthRole.Arn
        authenticated: !GetAtt CognitoAuthRole.Arn

#########################################################
# The below gives OS service access                      #
# to configure the Amazon Cognito user and identity pools #
# and use them for authentication                        #
#########################################################

  CognitoAccessForAmazonOS:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess


############################################################################################
# The below gives the role used by authenticated users from the cognito user pool          #
# to access the ES domain                                                                  #
############################################################################################
  CognitoAuthKibanaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - es:ESHttp*
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/*'
      Description: give role used by authenticated users from the cognito user pool access to the ES domain
      Roles:
        - !Ref CognitoAuthRole

########################################
# Cognito User pool                    #
########################################

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Welcome to the Office Hours Indexer. Username: {username} Pwd: {####}'
          EmailSubject: Welcome to Office Hours Indexer.
          SMSMessage: 'Welcome to Office Hours Indexer. Username: {username} Pwd: {####}'
        UnusedAccountValidityDays: 14
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: 'Welcome to the Office Hours Indexer. Here is your confirmation code: {####}'
      EmailVerificationSubject: Office Hours Indexer Email Confirmation Code
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UserPoolName: !Sub '${AWS::StackName}-users'
  CognitoApplicationClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
        ClientName: !Sub '${AWS::StackName}-appclient'
        GenerateSecret: false
        RefreshTokenValidity: 2
        UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub 'kibana-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'
      UserPoolId: !Ref CognitoUserPool

  ESCognito:
    Type: Custom::ESName
    DependsOn:
      - SetupOSCognitoCustomResourceLambda
    Properties:
      ServiceToken: !GetAtt SetupOSCognitoCustomResourceLambda.Arn
      StackName: !Ref AWS::StackName
      EsCluster: !Ref OSDomainName
      UserPoolId: !Ref CognitoUserPool
      DashboardUser: !Ref DashboardUser

  SetupOSCognitoCustomResourceLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/cognito-setup/
      Handler: app.configure_cognito_lambda_handler
      Runtime: python3.9
      MemorySize: 512
      Timeout: 240
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:AdminCreateUser'
              - 'cognito-idp:CreateUserPoolDomain'
              - 'cognito-idp:DeleteUserPoolDomain'
            Resource:
              - !GetAtt CognitoUserPool.Arn


  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    DependsOn:
    - ESCognito
    Properties:
      CognitoOptions:
        Enabled: true
        IdentityPoolId: !Ref CognitoIdentityPool
        RoleArn: !GetAtt CognitoAccessForAmazonOS.Arn
        UserPoolId: !Ref CognitoUserPool
      DomainName: !Ref OSDomainName
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      AdvancedOptions:
        indices.fielddata.cache.size: ''
        rest.action.multi.allow_explicit_index: 'true'
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        InstanceType: t3.small.search
        ZoneAwarenessEnabled: false
      EngineVersion: 'OpenSearch_1.1'

  CreateOSIndex:
    Type: Custom::LoadLambda
    DependsOn:
      - OpenSearchDomain
    Properties:
      ServiceToken: !GetAtt CreateOSIndexLambda.Arn
      CustomResourceAction: create_episode_index

  CreateOSIndexLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/index-create/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          LOG_LEVEL: INFO
          OS_DOMAIN: !GetAtt OpenSearchDomain.DomainEndpoint
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - 'es:ESHttpGet'
              - 'es:ESHttpPost'
              - 'es:ESHttpPut'
              - 'es:ESHttpHead'
            Resource:
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomain}/*'
              - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomain}'





  ProcessVideoArchiveStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt ProcessVideoArchiveStateMachineRole.Arn
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "GetAllVideos",
              "States": {
                "GetAllVideos":{
                  "Type": "Task",
                  "Resource": "${YouTubeGetChannelArn}",
                  "Next": "CheckIndex"
                },

                "CheckIndex": {
                  "Type": "Choice",
                  "Default": "StartNewStateMachineExecution",
                  "Choices": [
                    {
                      "Variable": "$.Index",
                      "NumericEqualsPath": "$.Length",
                      "Next": "End"
                    }
                  ]
                },

                "StartNewStateMachineExecution": {
                  "Type": "Task",
                  "Resource": "${YouTubeVideoStateMachineStartArn}",
                  "Next": "WaitForExecution"
                },
                "WaitForExecution": {
                  "Type": "Wait",
                  "Seconds": 900,
                  "Next": "CheckStateMachineExecutionStatus"
                },
                "CheckStateMachineExecutionStatus": {
                  "Type": "Task",
                  "Resource": "${YouTubeVideoStateMachineStatusArn}",
                  "Next": "CheckIfComplete"
                },
                "CheckIfComplete": {
                  "Type": "Choice",
                  "Default": "CheckIndex",
                  "Choices": [
                    {
                      "Variable": "$.ExecutionStatus",
                      "StringEquals": "RUNNING",
                      "Next": "WaitForExecution"
                    }
                  ]
                },
                "End":{
                    "Type": "Pass",
                    "End": true
                }
              }
            }
          - {YouTubeGetChannelArn: !GetAtt YouTubeGetChannel.Arn, YouTubeVideoStateMachineStartArn: !GetAtt YouTubeVideoStateMachineStart.Arn, YouTubeVideoStateMachineStatusArn: !GetAtt YouTubeVideoStateMachineStatus.Arn}

  ProcessVideoArchiveStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt YouTubeGetChannel.Arn
                  - !GetAtt YouTubeVideoStateMachineStart.Arn
                  - !GetAtt YouTubeVideoStateMachineStatus.Arn

  ###### LAMBDA DEFINITIONS

  YouTubeGetChannel:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/youtube-getchannel/
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 60
      Environment:
        Variables:
          LOG_LEVEL: INFO
          CHANNEL_ID: !Ref YouTubeChannelID

  YouTubeVideoStateMachineStart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/youtube-statemachine-start/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
          STATE_MACHINE_ARN: !Ref PipelineStateMachine
      Policies:
        -
          Statement:
            -
              Sid: TriggerStateMachine
              Effect: Allow
              Action:
                - states:ListStateMachines
                - states:DescribeStateMachine
                - states:StartExecution
              Resource:
                - !Ref PipelineStateMachine

  YouTubeVideoStateMachineStatus:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/youtube-statemachine-status/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Policies:
        -
          Statement:
            -
              Sid: TriggerStateMachine
              Effect: Allow
              Action:
                - states:ListStateMachines
                - states:DescribeStateMachine
                - states:DescribeExecution
              Resource:
                - !Ref PipelineStateMachine
                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution*"


  YouTubeCallbackApiLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/youtube-callback-api
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
          STATE_MACHINE_ARN: !Ref PipelineStateMachine
          RESUB_STATE_MACHINE_ARN: !Ref PubSubHubBubStateMachine
          YOUTUBE_CHANNEL: !Ref YouTubeChannelID
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: any
            RestApiId:
              Ref: YouTubeCallbackAPI
      Policies:
        -
          Statement:
            -
              Sid: TriggerStateMachine
              Effect: Allow
              Action:
                - states:ListStateMachines
                - states:DescribeStateMachine
                - states:StartExecution
              Resource:
                - !Ref PipelineStateMachine
                - !Ref PubSubHubBubStateMachine


  YouTubeGetInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/youtube-getinfo/
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 20
      Environment:
        Variables:
          LOG_LEVEL: INFO
          TABLE_NAME: !Ref VideoMetadataTable
      Policies:
        -
          Statement:
            -
              Sid: DynamodbWrite
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:BatchWriteItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${VideoMetadataTable}"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${VideoMetadataTable}/index/*"


  YouTubeDownload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/youtube-download/
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          LOG_LEVEL: INFO
          BUCKET_NAME: !Ref DataS3Bucket
      Policies:
        -
          Statement:
            -
              Sid: S3Access
              Effect: Allow
              Action:
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'


  YouTubeConversionStart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/mediaconvert-start/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
          MEDIACONVERT_ROLE: !GetAtt MediaConvertJobRole.Arn
      Policies:
        -
          Statement:
            -
              Sid: MediaConvertStart
              Effect: Allow
              Action:
                - "mediaconvert:GetJobTemplate"
                - "mediaconvert:CreateJob"
                - "mediaconvert:ListJobTemplates"
                - "mediaconvert:DescribeEndpoints"
              Resource:
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:presets/*"
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:queues/*"
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:jobTemplates*"
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:endpoints*"
            -
              Sid: S3Access
              Effect: Allow
              Action:
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'
            -
              Sid: MediaConvertPass
              Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource: !GetAtt MediaConvertJobRole.Arn

  YouTubeConversionStatus:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/mediaconvert-status/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
      Policies:
        -
          Statement:
            -
              Sid: MediaConvertStart
              Effect: Allow
              Action:
                - "mediaconvert:GetJob"
                - "mediaconvert:DescribeEndpoints"
              Resource:
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:jobs/*"
                - !Sub "arn:aws:mediaconvert:${AWS::Region}:${AWS::AccountId}:endpoints*"


  TranscribeStart:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/transcribe-start/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
          TRANSCRIBE_VOCAB_NAME: !Ref TranscribeVocabName
          BUCKET_NAME: !Ref DataS3Bucket
      Policies:
        -
          Statement:
            -
              Sid: TranscribeStart
              Effect: Allow
              Action:
                - 'transcribe:StartTranscriptionJob'
              Resource: '*'
            -
              Sid: S3Access
              Effect: Allow
              Action:
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'

      Architectures:
        - x86_64


  TranscribeStatus:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/transcribe-status/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Policies:
        -
          Statement:
            -
              Sid: TranscribeStatus
              Effect: Allow
              Action:
                - 'transcribe:GetTranscriptionJob'
              Resource: '*'
      Architectures:
        - x86_64


  ComprehendParagraph:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/comprehend-paragraph/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 150
      Environment:
        Variables:
          LOG_LEVEL: INFO
          BUCKET_NAME: !Ref DataS3Bucket
      Policies:
        -
          Statement:
            -
              Sid: ComprehendCall
              Effect: Allow
              Action:
                - 'comprehend:DetectEntities'
                - 'comprehend:DetectKeyPhrases'
                - 'comprehend:BatchDetectEntities'
                - 'comprehend:BatchDetectKeyPhrases'
              Resource: '*'
            -
              Effect: Allow
              Action:   # TODO - figure out exactly what is needed
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'
      Architectures:
        - x86_64

  ComprehendFullText:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/comprehend-fulltext/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 150
      Environment:
        Variables:
          LOG_LEVEL: INFO
          BUCKET_NAME: !Ref DataS3Bucket
      Policies:
        -
          Statement:
            -
              Sid: ComprehendCall
              Effect: Allow
              Action:
                - 'comprehend:DetectEntities'
                - 'comprehend:DetectKeyPhrases'
                - 'comprehend:BatchDetectEntities'
                - 'comprehend:BatchDetectKeyPhrases'
              Resource: '*'
            -
              Effect: Allow
              Action:   # TODO - figure out exactly what is needed
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'
      Architectures:
        - x86_64

  OpensearchInsert:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/opensearch-insert/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 150
      Environment:
        Variables:
          LOG_LEVEL: INFO
          BUCKET_NAME: !Ref DataS3Bucket
          OS_DOMAIN: !GetAtt OpenSearchDomain.DomainEndpoint
      Policies:
        -
          Statement:
            -
              Effect: Allow
              Action:   # TODO - figure out exactly what is needed
                - 's3:*'
              Resource:
                - !Sub 'arn:aws:s3:::${DataS3Bucket}/*'
                - !Sub 'arn:aws:s3:::${DataS3Bucket}'
            - 
              Effect: Allow
              Action:
                - 'es:ESHttpGet'
                - 'es:ESHttpPost'
                - 'es:ESHttpPut'
                - 'es:ESHttpHead'
              Resource:
                - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomain}/*'
                - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OpenSearchDomain}'
      Architectures:
        - x86_64



  PipelineStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt PipelineStateMachineRole.Arn
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "YouTubeGetInfo",
              "States": {
                "YouTubeGetInfo":{
                  "Type": "Task",
                  "Resource": "${YouTubeGetInfoArn}",
                  "Next": "YouTubeOKFilter"
                },
                "YouTubeOKFilter": {
                  "Type": "Choice",
                  "Default": "YouTubeDownload",
                  "Choices": [
                    {
                      "Not": {
                        "Variable": "$.youtubeStatus",
                        "StringEquals": "OK"
                      },
                      "Next": "End"
                    }
                  ]
                },
                "YouTubeDownload": {
                  "Type": "Task",
                  "Resource": "${YouTubeDownloadArn}",
                  "Next": "YouTubeConvertStart"
                },
                "YouTubeConvertStart": {
                  "Type": "Task",
                  "Resource": "${YouTubeConversionStartArn}",
                  "Next": "YouTubeConvertWait"
                },
                "YouTubeConvertWait": {
                  "Type": "Wait",
                  "Seconds": 120,
                  "Next": "YouTubeConvertStatus"
                },
                "YouTubeConvertStatus": {
                  "Type": "Task",
                  "Resource": "${YouTubeConversionStatusArn}",
                  "Next": "IsYouTubeConvertFinished"
                },
                "IsYouTubeConvertFinished": {
                  "Type": "Choice",
                  "Default": "YouTubeConvertWait",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "StringEquals": "ERROR",
                      "Next": "YouTubeConvertFailed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "CANCELED",
                      "Next": "YouTubeConvertFailed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "COMPLETE",
                      "Next": "TranscribeStart"
                    }
                  ]
                },
                "YouTubeConvertFailed": {
                  "Type": "Fail",
                  "Cause": "MediaConvert Failed.  Check CloudWatch logs for details.",
                  "Error": "ErrorA"
                },
                "TranscribeStart": {
                  "Type": "Task",
                  "Resource": "${TranscribeStartArn}",
                  "Next": "TranscribeWait"
                },
                "TranscribeWait": {
                  "Type": "Wait",
                  "Seconds": 120,
                  "Next": "TranscribeStatus"
                },
                "TranscribeStatus": {
                  "Type": "Task",
                  "Resource": "${TranscribeStatusArn}",
                  "Next": "IsTranscribeFinished"
                },
                "IsTranscribeFinished": {
                  "Type": "Choice",
                  "Default": "TranscribeWait",
                  "Choices": [
                    {
                      "Variable": "$.status",
                      "StringEquals": "FAILED",
                      "Next": "TranscribeFailed"
                    },
                    {
                      "Variable": "$.status",
                      "StringEquals": "COMPLETED",
                      "Next": "ComprehendParallel"
                    }
                  ]
                },
                "ComprehendParallel": {
                  "Type": "Parallel",
                  "Next": "IndexResults",
                  "Branches": [
                    {
                      "StartAt": "ComprehendParagraph",
                      "States": {
                          "ComprehendParagraph": {
                            "Type": "Task",
                            "Resource": "${ComprehendParagraphArn}",
                            "End": true
                          }
                      }
                    },
                    {
                      "StartAt": "ComprehendFullText",
                      "States": {
                          "ComprehendFullText": {
                            "Type": "Task",
                            "Resource": "${ComprehendFullTextArn}",
                            "End": true
                          }
                      }
                    }
                  ]
                },
                "IndexResults":{
                  "Type": "Task",
                  "Resource": "${OpensearchInsertArn}",
                  "Next": "End"
                },
                "End":{
                    "Type": "Pass",
                    "End": true
                },
                "TranscribeFailed": {
                  "Type": "Fail",
                  "Cause": "Transcription Failed.  Check CloudWatch logs for details.",
                  "Error": "ErrorA"
                }
              }
            }
          - {YouTubeGetInfoArn: !GetAtt YouTubeGetInfo.Arn, YouTubeDownloadArn: !GetAtt YouTubeDownload.Arn,   YouTubeConversionStartArn: !GetAtt YouTubeConversionStart.Arn, YouTubeConversionStatusArn: !GetAtt YouTubeConversionStatus.Arn, TranscribeStartArn: !GetAtt TranscribeStart.Arn, TranscribeStatusArn: !GetAtt TranscribeStatus.Arn, ComprehendParagraphArn: !GetAtt ComprehendParagraph.Arn, ComprehendFullTextArn: !GetAtt ComprehendFullText.Arn, OpensearchInsertArn: !GetAtt OpensearchInsert.Arn}


#### IAM ROLES


  MediaConvertJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "mediaconvert.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"

  PipelineStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt YouTubeGetInfo.Arn
                  - !GetAtt YouTubeDownload.Arn
                  - !GetAtt YouTubeConversionStart.Arn
                  - !GetAtt YouTubeConversionStatus.Arn
                  - !GetAtt TranscribeStart.Arn
                  - !GetAtt TranscribeStatus.Arn
                  - !GetAtt ComprehendParagraph.Arn
                  - !GetAtt ComprehendFullText.Arn
                  - !GetAtt OpensearchInsert.Arn



####################
# State Machine for pubsubhubbub
####################

  PubSubHubBubLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/pubsubhubbub/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
          YOUTUBE_CHANNEL: !Ref YouTubeChannelID
          # CALLBACK_URL: !Sub "https://${YouTubeCallbackAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/"
          SECRET: mysupersecretkeydoglexi
                  
  PubSubHubBubStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt PubSubHubBubStateMachineRole.Arn
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "Wait",
              "States": {
                "Wait":{
                  "Type": "Wait",
                  "SecondsPath": "$.secondsWait",
                  "Next": "RefreshSubscription"
                },
                "RefreshSubscription": {
                  "Type": "Task",
                  "Resource": "${PubSubHubBubLambdaArn}",
                  "End": true
                }
              }
            }
          - {PubSubHubBubLambdaArn: !GetAtt PubSubHubBubLambda.Arn}

  PubSubHubBubStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt PubSubHubBubLambda.Arn

### Resources that run once

  CreateVocab:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt TranscribeVocabCreate.Arn
      CustomResourceAction: CreateVocab

  TranscribeVocabCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/transcribe-vocab/
      Handler: app.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          LOG_LEVEL: INFO
          TRANSCRIBE_VOCAB_NAME: !Ref TranscribeVocabName
          TRANSCRIBE_VOCAB_TERMS: !Ref TranscribeVocabTerms
      Policies:
        -
          Statement:
            -
              Sid: TranscribeVocab
              Effect: Allow
              Action:
                - 'transcribe:CreateVocabulary'
                - 'transcribe:DeleteVocabulary'
              Resource: '*'
      Architectures:
        - x86_64



########## Temp Lambda Resources
  YouTubeCleanupInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/youtube-getinfo-fix/
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 20
      Environment:
        Variables:
          LOG_LEVEL: INFO
          TABLE_NAME: !Ref VideoMetadataTable
      Policies:
        -
          Statement:
            -
              Sid: DynamodbWrite
              Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${VideoMetadataTable}"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${VideoMetadataTable}/index/*"




Outputs:
  APIEndpointUrl:
    Description: "API Gateway endpoint URL for Prod stage for Youtube Trigger function"
    Value: !Sub "https://${YouTubeCallbackAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  DashboardPassword:
    Description: The password for the dashboard user
    Value: !GetAtt ESCognito.DashboardPassword
  DashboardUser:
    Description: The username for the dashboard user
    Value: !GetAtt ESCognito.DashboardUser
  DashboardURL:
    Description: A hyperlink to the Dashboard tool
    Value: !Sub https://${OpenSearchDomain.DomainEndpoint}/_dashboards/
  AlexaSkillLambdaArn:
    Description: The Alexa Skill ARN
    Value: !GetAtt AlexaSkillBackend.Arn
  CDNUrl:
    Description: URL of the Cloudfront Distribution
    Value: !Sub https://${CDNDistribution.DomainName}/